{"version":3,"sources":["../node_modules/bindings sync","files-and-folders-white.svg","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","fs","require","Styles","styled","div","read","parquetFile","a","arrayBuffer","buf","mkdir","writeFile","parquet","ParquetReader","openFile","reader","cursor","getCursor","record","records","next","push","close","Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","App","props","state","onDrop","bind","droppedFiles","console","log","path","Object","k","JSON","parse","stringify","this","setState","className","getRootProps","getInputProps","src","file_upload","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87bbc9c4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 184;","module.exports = __webpack_public_path__ + \"static/media/files-and-folders-white.9071a5a9.svg\";","import React from 'react';\nimport file_upload from './files-and-folders-white.svg';\nimport './App.css';\nimport Dropzone from 'react-dropzone'\nimport parquet from 'parquetjs';\nimport { useTable } from 'react-table'\nimport styled from 'styled-components'\nconst fs = require('browserify-fs');\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      :last-child {\n        border-right: 0;\n      }\n    }\n    td {\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n  .pagination {\n    padding: 0.5rem;\n  }\n`\n\nasync function read(parquetFile) {\n\n  // const selectedFile = document.getElementById('input').files[0];\n  let buf = await parquetFile.arrayBuffer();\n\n  fs.mkdir('/home');\n  fs.writeFile('/home/_temp.parquet', buf);\n\n  let reader = await parquet.ParquetReader.openFile('/home/_temp.parquet');\n  let cursor = reader.getCursor();\n  let record = null;\n  let records = [];\n  while (record = await cursor.next()) {\n    records.push(record);\n  }\n\n  reader.close();\n  return records;\n}\n\nfunction Table({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { data: [], columns: [] };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  async onDrop(droppedFiles) {\n    console.log('reading file ' + droppedFiles[0].path);\n    let records = await read(droppedFiles[0]);\n    let keys = Object.keys(records[0]).map(k => ({ 'Header': k, 'accessor': k }));\n\n    keys = JSON.parse(JSON.stringify(keys));\n    records = JSON.parse(JSON.stringify(records));\n\n    console.log(keys);\n    console.log(records);\n\n    this.setState(({ columns: keys, data: records }));\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Dropzone onDrop={this.onDrop}>\n            {({ getRootProps, getInputProps }) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <img src={file_upload} className=\"App-logo\" alt=\"logo\" />\n                  <p>Drag 'n' drop some files here, or click to select files</p>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n        </header>\n        <Styles>\n          <Table columns={this.state.columns} data={this.state.data} />\n\n        </Styles>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}